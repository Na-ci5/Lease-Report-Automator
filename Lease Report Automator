<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Lease Report Automator</title>
  <style>
    body { font-family: Arial, sans-serif; padding: 20px; }
    table { border-collapse: collapse; width: 100%; margin-top: 10px; }
    th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
    th { background-color: #eee; }
    #downloadBtn { margin-top: 15px; padding: 8px 12px; }
    #rawContainer, #summaryContainer { max-height: 300px; overflow: auto; }
  </style>
</head>
<body>
  <h1>Lease Report Automator</h1>
  <input type="file" id="fileInput" accept=".csv" /><br/>

  <h2>Raw Lease Data</h2>
  <div id="rawContainer"></div>

  <h2>Summary by Building</h2>
  <div id="summaryContainer"></div>

  <button id="downloadBtn" disabled>Download Summary CSV</button>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
  <script>
    const fileInput = document.getElementById('fileInput');
    const downloadBtn = document.getElementById('downloadBtn');
    let summaryData = [];

    fileInput.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (!file) return alert('No file selected');

      Papa.parse(file, {
        header: true,
        dynamicTyping: true,
        skipEmptyLines: true,
        complete: (results) => {
          console.log('PapaParse results:', results);
          if (results.errors.length) console.error('Parse errors:', results.errors);

          const rows = results.data;
          if (!rows.length) return alert('No data parsed! Make sure your CSV has headers and data.');

          renderTable(rows, document.getElementById('rawContainer'));

          const grouped = rows.reduce((acc, row) => {
            const b = row.Building || 'Unknown';
            const rent = Number(row.Rent) || 0;
            if (!acc[b]) acc[b] = { Building: b, LeaseCount: 0, TotalRent: 0 };
            acc[b].LeaseCount++;
            acc[b].TotalRent += rent;
            return acc;
          }, {});

          summaryData = Object.values(grouped);
          renderTable(summaryData, document.getElementById('summaryContainer'));
          downloadBtn.disabled = summaryData.length === 0;
        },
        error: (err) => {
          console.error('PapaParse error:', err);
          alert('Error parsing file: ' + err.message);
        }
      });
    });

    function renderTable(data, container) {
      if (!data.length) {
        container.innerHTML = '<p>No data to display.</p>';
        return;
      }
      const cols = Object.keys(data[0]);
      let html = '<table><thead><tr>' + cols.map(c => `<th>${c}</th>`).join('') + '</tr></thead><tbody>';
      data.forEach(row => {
        html += '<tr>' + cols.map(c => `<td>${row[c]}</td>`).join('') + '</tr>';
      });
      html += '</tbody></table>';
      container.innerHTML = html;
    }

    downloadBtn.addEventListener('click', () => {
      if (!summaryData.length) return;
      const csv = Papa.unparse(summaryData);
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = 'lease_summary.csv';
      a.click();
      URL.revokeObjectURL(a.href);
    });
  </script>
</body>
</html>
